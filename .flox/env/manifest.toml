## Flox Environment Manifest -----------------------------------------
##
##   _Everything_ you need to know about the _manifest_ is here:
##
##   https://flox.dev/docs/reference/command-reference/manifest.toml/
##
## -------------------------------------------------------------------
# Flox manifest version managed by Flox CLI
version = 1


## Install Packages --------------------------------------------------
##  $ flox install gum  <- puts a package in [install] section below
##  $ flox search gum   <- search for a package
##  $ flox show gum     <- show all versions of a package
## -------------------------------------------------------------------
[install]
python.pkg-path = "python3"
python.version = "3.12"  # <-- Change this to the version of Python you want
uv.pkg-path = "uv"
uv.version = "0.6.0"
gum.pkg-path = "gum" # helper tools
coreutils.pkg-path = "coreutils"

## Environment Variables ---------------------------------------------
##  ... available for use in the activated environment
##      as well as [hook], [profile] scripts and [services] below.
## -------------------------------------------------------------------
[vars]
# INTRO_MESSAGE = "It's gettin' Flox in here"


## Activation Hook ---------------------------------------------------
##  ... run by _bash_ shell when you run 'flox activate'.
## -------------------------------------------------------------------
[hook]
on-activate = '''

export FLOX_PYTHON_UV_CACHE_DIR="$FLOX_ENV_CACHE/python-uv"
mkdir -p "$FLOX_PYTHON_UV_CACHE_DIR"

export FLOX_PYTHON_UV_VENV_PATH="$FLOX_PYTHON_UV_CACHE_DIR/venv"
export FLOX_PYTHON_UV_VENV_INTERPRETER="$(cat "$FLOX_PYTHON_UV_CACHE_DIR/venv.interpreter" 2> /dev/null || echo false )"
export FLOX_PYTHON_UV_INTERPRETER="$(realpath $(which python3))"

# Make sure any tools are not attempting to use the Python interpreter from any
# existing virtual environment.
unset VIRTUAL_ENV

export UV_PROJECT_ENVIRONMENT="$FLOX_PYTHON_UV_VENV_PATH"

function indent() {
  echo -e '{{ Foreground "#cccccc" " │ "}}' | \
    gum format -t template --theme=auto
}

function with_spinner() {
  if [[ "$FLOX_ENVS_TESTING" == "1" ]]; then
    bash -c "$1"
  else
    echo
    gum spin \
      --show-error \
      --spinner line \
      --spinner.foreground="#cccccc" \
      --title " >>> $2 ..." \
      --title.foreground="#cccccc" \
        -- bash -c "$1"
    echo -en "\033[2A\033[K"
  fi
}

function ensure_venv() {
  uv venv -p "$FLOX_PYTHON_UV_INTERPRETER" "$FLOX_PYTHON_UV_VENV_PATH"
  source "$FLOX_PYTHON_UV_VENV_PATH/bin/activate"
}
export -f ensure_venv

function install_packages() {
  uv sync
}
export -f install_packages



indent && echo
indent && echo

if [ "$FLOX_PYTHON_UV_VENV_INTERPRETER" != "$FLOX_PYTHON_UV_INTERPRETER" ]; then
  with_spinner ensure_venv "Creating virtual environment"
  indent && echo -e "{{ Foreground \"#ffffff\" \"✅ Virtual environment was created.\" }}\n" \
    | gum format -t template
else
  indent && echo -e "{{ Foreground \"#ffffff\" \"✅ Virtual environment already exists.\" }}\n" \
    | gum format -t template
fi

indent && echo

if [ -f pyproject.toml ]; then
  with_spinner install_packages "Installing Python packages"
  indent && echo -e "{{ Foreground \"#ffffff\" \"✅ Python packages installed.\" }}\n" \
    | gum format -t template
else
  indent && echo -e "{{ Foreground \"#ffffff\" \"✅ No need to install Python packages.\" }}\n" \
    | gum format -t template
fi

indent && echo

'''


## Profile script ----------------------------------------------------
## ... sourced by _your shell_ when you run 'flox activate'.
## -------------------------------------------------------------------
[profile]
# common = '''
#   gum style \
#   --foreground 212 --border-foreground 212 --border double \
#   --align center --width 50 --margin "1 2" --padding "2 4" \
#     $INTRO_MESSAGE
# '''
## Shell-specific customizations such as setting aliases go here:
bash = '''
source "$FLOX_PYTHON_UV_VENV_PATH/bin/activate"
'''
fish = '''
source "$FLOX_PYTHON_UV_VENV_PATH/bin/activate.fish"
'''
tcsh = '''
source "$FLOX_PYTHON_UV_VENV_PATH/bin/activate.csh"
'''
zsh = '''
source "$FLOX_PYTHON_UV_VENV_PATH/bin/activate"
'''

## Services ---------------------------------------------------------
##  $ flox services start             <- Starts all services
##  $ flox services status            <- Status of running services
##  $ flox activate --start-services  <- Activates & starts all
## ------------------------------------------------------------------
[services]
# myservice.command = "python3 -m http.server"


## Include ----------------------------------------------------------
## ... environments to create a composed environment
## ------------------------------------------------------------------
[include]
# environments = [
#     { dir = "../common" }
# ]


## Build and publish your own packages ------------------------------
##  $ flox build
##  $ flox publish
## ------------------------------------------------------------------
[build]
# [build.myproject]
# description = "The coolest project ever"
# version = "0.0.1"
# command = """
#   mkdir -p $out/bin
#   cargo build --release
#   cp target/release/myproject $out/bin/myproject
# """


## Other Environment Options -----------------------------------------
[options]
# Systems that environment is compatible with
systems = [
  "aarch64-darwin",
  "aarch64-linux",
  "x86_64-darwin",
  "x86_64-linux",
]
# Uncomment to disable CUDA detection.
# cuda-detection = false
